name: Create Pull Request For Release
on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: 'New version of release'
        required: true
      frontChartVersion:
        description: 'Front-end chart version'
      backChartVersion:
        description: 'Back-end chart version'
      isPreRelease:
        type: boolean
        description: 'Create release candidate'
        required: true

env:
  BRANCH_PREFIX: ${{ inputs.isPreRelease && 'pre-release' || 'release'  }}

jobs:
  release-pull-request-job:
    permissions:
      contents: write
      pull-requests: write
    name: Create pull request for release
    runs-on: ubuntu-latest
    steps:
      - name: Log status
        run: echo $BRANCH_PREFIX

      - name: This workflow should run only main branch
        if: github.ref_name != 'main'
        run: echo This workflow should run only main branch. Current branch is "${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY && exit 1

      - uses: actions/checkout@v3
      - uses: dcarbone/install-yq-action@v1.1.0      
      - uses: dcarbone/install-jq-action@v1.0.1

      - name: Install sponge
        run: sudo apt-get install moreutils

      - name: Create new ref
        id: created_ref
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "CREATED_REF_SHA=$(gh api \
          --method POST \
          -H "Accept: application/vnd.github+json" \
          /repos/${{ github.repository }}/git/refs \
          -f ref="refs/heads/$BRANCH_PREFIX/${{ inputs.releaseVersion }}" \
          -f sha=${{ github.sha }} | jq '.object.sha')" >> $GITHUB_OUTPUT

      - name: Bump backendVersion in chartsVersions.json
        if: ${{ inputs.backChartVersion != '' }}
        run: jq '.backendVersion = "${{ inputs.backChartVersion }}"' chartsVersions.json | sponge chartsVersions.json

      - name: Bump frontendVersion in chartsVersions.json
        if: ${{ inputs.frontChartVersion != '' }}
        run:  jq '.frontendVersion = "${{ inputs.frontChartVersion }}"' chartsVersions.json | sponge chartsVersions.json

      - name: Bump version openapi-aggregate.json
        run:  jq '.info.version = "${{ inputs.releaseVersion }}"' openapi-aggregate.json | sponge openapi-aggregate.json

      - name: Bump version openapi-aggregate.yaml
        run:  yq -i '.info.version = "${{ inputs.releaseVersion }}"' openapi-aggregate.yaml

      - name: Create blob for chartsVersions.json
        env:
          GH_TOKEN: ${{ github.token }}
        id: chart_blob
        run: |
          echo "CHARTS_SHA=$(gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/git/blobs \
            -f content="$(base64 chartsVersions.json)" \
            -f encoding='base64' \
          | jq '.sha')" >> $GITHUB_OUTPUT

      - name: Create blob for openapi-aggregate.json
        env:
          GH_TOKEN: ${{ github.token }}
        id: openapi_json_blob
        run: |
          echo "OPEN_API_JSON_SHA=$(gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/git/blobs \
            -f content="$(base64 openapi-aggregate.json)" \
            -f encoding='base64' \
          | jq '.sha')" >> $GITHUB_OUTPUT

      - name: Create blob for openapi-aggregate.yaml
        env:
          GH_TOKEN: ${{ github.token }}
        id: openapi_yaml_blob
        run: |
          echo "OPEN_API_YAML_SHA=$(gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/git/blobs \
            -f content="$(base64 openapi-aggregate.yaml)" \
            -f encoding='base64' \
          | jq '.sha')" >> $GITHUB_OUTPUT

      - name: Create tree
        id: create_tree
        run: |
          echo "CREATED_TREE_SHA=$(curl \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ github.token }}"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/git/trees \
            -d '{"base_tree":"${{ github.sha }}","tree":[{ "path":"chartsVersions.json","mode":"100644","type":"blob","sha":${{ steps.chart_blob.outputs.CHARTS_SHA }}},{ "path":"openapi-aggregate.json", "mode":"100644", "type":"blob", "sha":${{ steps.openapi_json_blob.outputs.OPEN_API_JSON_SHA }}},{ "path":"openapi-aggregate.yaml", "mode":"100644", "type":"blob", "sha":${{ steps.openapi_yaml_blob.outputs.OPEN_API_YAML_SHA }}}]}' | jq '.sha')" >> $GITHUB_OUTPUT

#      - name: DEBUG BLOB'S and SHA
#        run: |
#          echo CHARTS_SHA ${{ steps.chart_blob.outputs.CHARTS_SHA }}
#          echo OPENAPI_JSON ${{ steps.openapi_json_blob.outputs.OPEN_API_JSON_SHA }}
#          echo OPENAPI_YAML ${{ steps.openapi_yaml_blob.outputs.OPEN_API_YAML_SHA }}
#          echo CREATED REF ${{ steps.created_ref.outputs.CREATED_REF_SHA }}
#          echo CREATED TREE ${{ steps.create_tree.outputs.CREATED_TREE_SHA }}
#          echo github.sha ${{ github.sha }}

      - name: Create commit
        id: create_commit
        env:
          currentFrontChartVersion: jq '.frontendVersion' chartsVersions.json
          currentBackChartVersion: jq '.backendVersion' chartsVersions.json
        run: |
          echo "COMMIT_SHA=$(curl \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ github.token }}"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/git/commits \
            -d '{"message":"⬆️ OpenTDF ${{ inputs.releaseVersion }} with charts frontend ${{ inputs.frontChartVersion != '' && inputs.frontChartVersion || "$currentFrontChartVersion" }}, backend ${{ inputs.backChartVersion != '' && inputs.backChartVersion || "$currentBackChartVersion" }}","parents":[${{ steps.created_ref.outputs.CREATED_REF_SHA }}],"tree":${{ steps.create_tree.outputs.CREATED_TREE_SHA }}}' | jq '.sha')" >> $GITHUB_OUTPUT


      - name: Updating ref
        run: |
          curl \
            -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ github.token }}"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
            PATCH "https://api.github.com/repos/${{ github.repository }}/git/refs/heads/$BRANCH_PREFIX/${{ inputs.releaseVersion }}"  \
            -d '{"sha": ${{ steps.create_commit.outputs.COMMIT_SHA }},"force":true}'

      - name: Create pull request
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
            gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/pulls \
            -f title='${{ inputs.releaseVersion }} Release' \
            -f body='- [ ] Create release' \
            -f head="$BRANCH_PREFIX/${{ inputs.releaseVersion }}" \
            -f base='main'
